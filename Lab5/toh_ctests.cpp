/* DO NOT EDIT THIS FILE! */
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include "doctest.h"
#include <stdio.h>
#include <string.h>

#include "towerOfHanoi.h"

// Use https://www.calculatorsoup.com/calculators/geometry-solids/cylinder.php for basic formulas for various dimensions of a cylinder

// ********************** CORRECT RESULTS **********************
// test data for 'color's
char colors[][10] = {"hole", "red", "orange", "yellow", "green"};

// 2D list: each color has six (5) elements of data in addition to its index [ => radius]:
// Each line of data corresponds to the 1D list "colors")
//    (index [ => radius ]; note the "hole" has index 0 and radius 1/2 inch)
//
// 0. solid disk "diameter"
// 1. solid disk "circumference"
// 2. solid disk "surface area"
// 3. ** BONUS POINTS - Tower of Hanoi disk with hole ["toh"] "surface area"
// 4. solid disk "volume"
// 5. ** BONUS POINTS - Tower of Hanoi disk with hole ["toh"] "volume"
double disk_data[][6] = {{1, 3.141592653589793, 4.71238898038469, 0, 0.7853981633974483, 0},
                         {2, 6.283185307179586, 12.566370614359172, 14.137166941154069, 3.141592653589793, 2.356194490192345},
                         {4, 12.566370614359172, 37.69911184307752, 39.26990816987241, 12.566370614359172, 11.780972450961723},
                         {6, 18.84955592153876, 75.39822368615503, 76.96902001294994, 28.274333882308138, 27.48893571891069},
                         {8, 25.132741228718345, 125.66370614359172, 127.23450247038663, 50.26548245743669, 49.480084294039244}};

// ********************** CORRECT RESULTS **********************

double height = 1;
TEST_CASE("Read from File all colors as a single string")
{
    // read TEST RESULTS colors array and make a single string
    char  all_colors[100];
    memset(all_colors, 0, 100);
    for (int i = 0; i < sizeof(colors) / sizeof(colors[0]); i++)
    {
        // combine all colors as a single string with each color
        // followed by a space character (' ')
        strncat(all_colors, colors[i], strlen(colors[i]));
        strncat(all_colors, " ", 2);
    }
    printf("\"%s\" to read from file (including spaces)\n", all_colors);

    // read STUDENT TEST DATA from data file
    char fileName[] = "towerOfHanoi.dat";

    // TODO #1 ****** void Function #1 ******
    // 1. remove 'line feed' & 'carriage return' characters
    //    from all strings read
    // 2. concatenate space character at end of each color
    int SIZE = 100;
    char colors_string[SIZE];
    read_colors(fileName, colors_string, SIZE);

    // test for individual colors
    for (int i = 0; i < sizeof(colors) / sizeof(colors[0]); i++)
    {
        CHECK(strstr(colors_string, colors[i]) != nullptr);
        printf("color: %s;\tin substring: %s\n", colors[i], strstr(colors_string, colors[i]));
    }

    // test for all colors in order (including spaces)
    CHECK(strstr(colors_string, all_colors) != nullptr);
    printf("colors_string:\t%s\nall_colors:\t%s characters\n", colors_string, all_colors);
}
TEST_CASE("Find Diameter")
{
    double radius;
    for (int i = 0; i < sizeof(colors) / sizeof(colors[0]); i++)
    {
        radius = static_cast<double>(i);
        if (radius == 0)
        {
            radius = 1.0 / 2.0;
        } else radius *= 1;
        // TODO #2
        // ****** double Function #2 ******
        // calculate diameter
        double diameter = calc_diameter(radius);
        CHECK(fabs(diameter - disk_data[i][0]) < 0.00001);
        printf("radius: %f; diameter: %lf\n", radius, diameter);
    }
}
TEST_CASE("Find Circumference")
{
    double radius;
    for (int i = 0; i < sizeof(colors) / sizeof(colors[0]); i++)
    {
        radius = static_cast<double>(i);
        if (radius == 0)
        {
            radius = 1.0 / 2.0;
        }else radius *= 1;
        // TODO #3
        // ****** double Function #3 ******
        // calculate circumference
        double circumference = calc_circumference(radius);
        CHECK(fabs(circumference - disk_data[i][1]) < 0.00001);
        printf("radius: %f; circumference: %lf\n", radius, circumference);
    }
}
TEST_CASE("Find Disk Surface Area")
{
    double radius;
    for (int i = 0; i < sizeof(colors) / sizeof(colors[0]); i++)
    {
        radius = static_cast<double>(i);
        if (radius == 0)
        {
            radius = 1.0 / 2.0;
        }else radius *= 1;
        // TODO #4
        // ****** double Function #4 ******
        // calculate total_surface_area
        double total_surface_area = calc_total_surface_area(radius, height);
        CHECK(fabs(total_surface_area - disk_data[i][2]) < 0.00001);
        printf("radius: %f; total_surface_area: %lf\n", radius, total_surface_area);
    }
}
TEST_CASE("Find Disk Volume")
{
    double radius;
    for (int i = 0; i < sizeof(colors) / sizeof(colors[0]); i++)
    {
        radius = static_cast<double>(i);
        if (radius == 0)
        {
            radius = 1.0 / 2.0;
        }else radius *= 1;
        // TODO #5
        // ****** double Function #5 ******
        // calculate volume
        double volume = calc_volume(radius, height);
        CHECK(fabs(volume - disk_data[i][4]) < 0.00001);
        printf("radius: %f; volume: %lf\n", radius, volume);
    }
}
TEST_CASE("Find Tower of Hanoi Disk Surface Area")
{
    double radius;
    for (int i = 0; i < sizeof(colors) / sizeof(colors[0]); i++)
    {
        radius = static_cast<double>(i);
        if (radius == 0)
        {
            radius = 1.0 / 2.0;
        }else radius *= 1;
        // BONUS TODO #6
        // ****** double Function #6 ******
        // calculate toh_disk_surface_area
        double toh_disk_surface_area = calc_toh_disk_surface_area(radius, height);
        CHECK(fabs(toh_disk_surface_area - disk_data[i][3]) < 0.00001);
        printf("radius: %f; toh_disk_surface_area: %lf\n", radius, toh_disk_surface_area);
    }
}
TEST_CASE("Find Tower of Hanoi Disk Volume")
{
    double radius;
    for (int i = 0; i < sizeof(colors) / sizeof(colors[0]); i++)
    {
        radius = static_cast<double>(i);
        if (radius == 0)
        {
            radius = 1.0 / 2.0;
        }else radius *= 1;
        // BONUS TODO #7
        // ****** double Function #7 ******
        // calculate toh_disk_surface_area
        double toh_disk_volume = calc_toh_disk_volume(radius, height);
        CHECK(fabs(toh_disk_volume - disk_data[i][5]) < 0.00001);
        printf("radius: %f; toh_disk_volume: %lf\n", radius, toh_disk_volume);
    }
}
