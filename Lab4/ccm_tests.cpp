/* DO NOT EDIT THIS FILE! */
// g++ -std=c++11 -Wall -Werror ccm_tests.cpp -o tests
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include "doctest.h"

#include <stdio.h>
#include <string.h>
#include <math.h>

extern "C"
{
#include "monument.h"
}
TEST_CASE("Scale Model")
{
    // Input data from file 'monument.dat'
    FILE *inFile;

    if ((inFile = fopen("monument.dat", "r")) == NULL)
    {
        printf("File could not be opened or is not available [cm_tests.cpp].\n");
    }
    else
    {
        // Declare inputted variables
        int SIZE = 255;      // sizeof(building);
        char monument[SIZE]; // default name
        strncpy(monument, "The Washington Monument", strlen("The Washington Monument") + 1);

        // input HEIGHT of building with default values
        char message1[] = "The HEIGHT of the Federal Building in FEET";
        double height_in_meters = readData(message1, inFile);
        printf("\n");
        CHECK(height_in_meters == 5.8928);

        // input DIAMETER of building with default values
        char message2[] = "The DIAMETER of the Federal Building in FEET";
        double diameter_in_meters = readData(message2, inFile);
        printf("\n");
        CHECK(diameter_in_meters == 2.5008);

        // input SCALE for model with default value
        char message3[] = "The SCALE for creating a model";
        double scale;
        scale = readData(message3, inFile);
        printf("\n");
        CHECK(scale == 15);

        // input the monument at the U.S. Capital building with default name
        // value of 'monument' passed by reference (memory location)
        readName(monument, SIZE, inFile);
        monument[strcspn(monument, "\r\n")] = '\0';
        char answer[] = "The Statue of Freedom";
        printf("\n");
        CHECK(strncmp(answer, monument, strlen(answer)) == 0);

        // Declare calculated variables
        double monument_height_in_inches;
        double monument_diameter_in_inches;

        double scaled_model_height_in_inches;
        double scaled_model_diameter_in_inches;

        int model_height_in_feet;
        double model_height_in_inches;
        int model_diameter_in_feet;
        double model_diameter_in_inches;

        // Calculate total dimensions in inches & CHECK results
        monument_height_in_inches = total_in_inches(height_in_meters);
        monument_diameter_in_inches = total_in_inches(diameter_in_meters);

        CHECK(fabs(232 - monument_height_in_inches) < 0.0001);
        CHECK(fabs(98.4567 - monument_diameter_in_inches) < 0.0001);

        // Calculate model length in inches & CHECK results
        scaled_model_height_in_inches = scale_inches(monument_height_in_inches, scale);
        scaled_model_diameter_in_inches = scale_inches(monument_diameter_in_inches, scale);

        CHECK(fabs(15.4667 - scaled_model_height_in_inches) < 0.0001);
        CHECK(fabs(6.56378 - scaled_model_diameter_in_inches) < 0.0001);

        // Calculate model length in feet & inches & CHECK results
        model_height_in_feet = find_feet(scaled_model_height_in_inches);
        model_height_in_inches = find_inches(scaled_model_height_in_inches);
        model_diameter_in_feet = find_feet(scaled_model_diameter_in_inches);
        model_diameter_in_inches = find_inches(scaled_model_diameter_in_inches);

        CHECK(fabs(1 - model_height_in_feet) < 0.0001);
        CHECK(fabs(3.46667 - model_height_in_inches) < 0.0001);
        CHECK(fabs(0 - model_diameter_in_feet) < 0.0001);
        CHECK(fabs(6.56378 - model_diameter_in_inches) < 0.0001);

        // Output overall dimensions of model
        printf("The interior dimensions in feet & inches of ");
        printf("a tube-shaped package containing the scaled model is: ");
        printf("%d%s", model_height_in_feet, "\' ");
        printf("%.4f%s", model_height_in_inches,  "\" ");
        printf("%d%s", model_diameter_in_feet,  "\' ");
        printf("%.4f%s\n", model_diameter_in_inches,  "\" ");

        fclose(inFile);
    }
}